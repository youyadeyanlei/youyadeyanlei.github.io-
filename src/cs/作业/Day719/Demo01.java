package cs.作业.Day719;

public class Demo01 {

     byte        Byte;
    short       Short;
    int         Integer;
    long        Long;
    float       Float;
    double      Double;
    char        Character;
    boolean     Boolean;
//    String str;//初始化为空字符串
//
//    String str=字符串；//初始化为指定字符串
//
//    String str(字符串)；//同上
//
//    String str(字符串s，位置p，数量n)；//字符串s中从p开始的n个字符组成的新字符串作为str的值
//
//    String str(数量n，字符c)；//初始化为n个字符c
//
//    String内部常用的成员函数
//            获得对象信息
//    size()//获取字符串的字符数(string是字节数)，返回类型是size_t
//
//    length() // 同上
//
//    max_size()//获取std.:string可以处理的最大字符数(std:string是字节数)，返回类型是size_t
//
//    capacity()/获取字符串对象目前的容量，单位是字符，返回类型是size_t
//
//    empty()//判断字符串是不是空,返回值类型是bool。
//
//    clear() //清空字符串对象(也可以直接赋值空字符串如string=""😉
//
//    resize(大小) // 调整字符串对象的大小,多出来的数组空间默认用空字符填充
//
//    resize(大小，字符)//调整字符串对象的大小
//
//    at()与中括号[]功能一样，但at()在越界访问时抛出异常警报，让程序直接崩溃
//
//            对对象赋值
//    push_back(字符)//在末尾添加一个字符，也可以用"+="
//
//    append(字符串)//在末尾添加字符串，也可以用"+="
//
//    append(字符串s，开始位置p，数量n)//将字符串s中从p开始的n个字符添加到未尾
//
//    append(数量n，字符c)//在末尾添加n个字符c
//
//    assign(字符串)//重新赋值
//
//    assign(字符串s，开始位置p，数量n)//将字符串s中从p开始的n个字符赋值给字符串对象
//
//    assign(数量n,字符c)// 赋值为n个字符c
//    改变字符串对象的内容
//
//    insert(位置p，字符串s)//在位置p插入字符串s
//
//    insert(位置p，字符串s，开始位置sp，数量n)//将字符串s中从sp开始的n个字符插入到位置p
//
//    insert(位置p，数量n，字符c)//在位置p插入n个字符c
//
//    replace(位置p，数量n，字符串s)//字符串中从p开始的n个字符替换为字符串s
//
//    replace(位置p，数量n，字符串s，开始位置sp，数量sn)//将字符串s中从p开始的n个字符替换字符串从p开始的n个字符• replace(位置p，数量n，数量sn，字符c)//字符串中从p开始的n个字符替换为sn个字符c
//
//    erase(位置p，数量n)//删除字符串中从位置p开始的n个字符
//
//    erase(位置p)//删除字符串中从位置p开始的所有字符
//
//    erase()// 清空字符串，与clear一样
//
//    对对象查找
//    以下返回类型都是size_t，如果找不到则返回std:string:npos
//
//    find(字符C，位置p)//在字符串中从位置p开始向后查找第一次出现字符c的位置
//
//    find(字符串s，位置p)//在字符串中从位置p开始向后查找查找第一次出现字符串s的位置
//
//    rfind(字符c，位置p)//在字符串中从位置p开始向前查找第一次出现字符c的位置
//
//    rfind(字符串s，位置p)//在字符串中从位置p开始向前查找查找第一次出现字符串s的位置
//
//    find_first_of(字符c，位置p)//在字符串中从位置p开始向后查找第一次出现字符c的位置
//
//    find_first_of(字符串s，位置p)//在字符串中从位置p开始向后查找字符串s中任意一个字符，返回第一次出现的位置
//
//    find_last_of(字符C,位置p)//在字符串中从位置p开始向前查找第一次出现字符c的位置
//
//    find_last_of(字符串s，位置p)//在字符串中从位置p开始向前查找字符串s中任意一个字符，返回第一次出现的位置
//
//    find_first_ not_of(字符C，位置p)//在字符串中从位置p开始向后查找第一个不是字符c的字符的位置
//
//    find_first_not_of(字符串s，位置p)//在字符串中从位置p开始向后查找第一个不是字符串s中任意一个字符，返回第一次出现的位置
//    find_last_not_of(字符c，位置p)//在字符串中从位置p开始向前查找第一个不是字符c的字符的位置
//
//    find_last_not_of(字符串s，位置p)//在字符串中从位置p开始向前查找第一个不是字符串s中任意一个字符，返回第一次出现的位置
//    子字符串
//
//    substr(位置p,数量n) // 获取子字符串，即字符串中从位置p开始的n个字符作为新的字符串•substr(位置p) // 获取子字符串，即字符串中从位置p开始到结尾作为新的字符串
//
//    substr() // 字符串中从位置开始到结尾作为新的字符串，即复制出一个新的字符串





}
